// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: gjarvis_service.proto

package gjarvisproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GJarvisServiceClient is the client API for GJarvisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GJarvisServiceClient interface {
	JarvisHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	SendText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*JarvisResponse, error)
}

type gJarvisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGJarvisServiceClient(cc grpc.ClientConnInterface) GJarvisServiceClient {
	return &gJarvisServiceClient{cc}
}

func (c *gJarvisServiceClient) JarvisHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/gjarvisproto.GJarvisService/JarvisHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gJarvisServiceClient) SendText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*JarvisResponse, error) {
	out := new(JarvisResponse)
	err := c.cc.Invoke(ctx, "/gjarvisproto.GJarvisService/SendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GJarvisServiceServer is the server API for GJarvisService service.
// All implementations must embed UnimplementedGJarvisServiceServer
// for forward compatibility
type GJarvisServiceServer interface {
	JarvisHello(context.Context, *Request) (*Reply, error)
	SendText(context.Context, *TextRequest) (*JarvisResponse, error)
	mustEmbedUnimplementedGJarvisServiceServer()
}

// UnimplementedGJarvisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGJarvisServiceServer struct {
}

func (UnimplementedGJarvisServiceServer) JarvisHello(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JarvisHello not implemented")
}
func (UnimplementedGJarvisServiceServer) SendText(context.Context, *TextRequest) (*JarvisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendText not implemented")
}
func (UnimplementedGJarvisServiceServer) mustEmbedUnimplementedGJarvisServiceServer() {}

// UnsafeGJarvisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GJarvisServiceServer will
// result in compilation errors.
type UnsafeGJarvisServiceServer interface {
	mustEmbedUnimplementedGJarvisServiceServer()
}

func RegisterGJarvisServiceServer(s grpc.ServiceRegistrar, srv GJarvisServiceServer) {
	s.RegisterService(&GJarvisService_ServiceDesc, srv)
}

func _GJarvisService_JarvisHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GJarvisServiceServer).JarvisHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gjarvisproto.GJarvisService/JarvisHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GJarvisServiceServer).JarvisHello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GJarvisService_SendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GJarvisServiceServer).SendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gjarvisproto.GJarvisService/SendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GJarvisServiceServer).SendText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GJarvisService_ServiceDesc is the grpc.ServiceDesc for GJarvisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GJarvisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gjarvisproto.GJarvisService",
	HandlerType: (*GJarvisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JarvisHello",
			Handler:    _GJarvisService_JarvisHello_Handler,
		},
		{
			MethodName: "SendText",
			Handler:    _GJarvisService_SendText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gjarvis_service.proto",
}
