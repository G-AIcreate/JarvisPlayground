/*
 * Swagger Gjarvis - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// GjarvisAPIController binds http requests to an api service and writes the service results to the http response
type GjarvisAPIController struct {
	service      GjarvisAPIServicer
	errorHandler ErrorHandler
}

// GjarvisAPIOption for how the controller is set up.
type GjarvisAPIOption func(*GjarvisAPIController)

// WithGjarvisAPIErrorHandler inject ErrorHandler into controller
func WithGjarvisAPIErrorHandler(h ErrorHandler) GjarvisAPIOption {
	return func(c *GjarvisAPIController) {
		c.errorHandler = h
	}
}

// NewGjarvisAPIController creates a default api controller
func NewGjarvisAPIController(s GjarvisAPIServicer, opts ...GjarvisAPIOption) Router {
	controller := &GjarvisAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GjarvisAPIController
func (c *GjarvisAPIController) Routes() Routes {
	return Routes{
		"RequestSessionId": Route{
			strings.ToUpper("Get"),
			"/generate-session",
			c.RequestSessionId,
		},
		"SendAudio": Route{
			strings.ToUpper("Post"),
			"/audio-message",
			c.SendAudio,
		},
		"SendText": Route{
			strings.ToUpper("Post"),
			"/text-message",
			c.SendText,
		},
	}
}

// RequestSessionId - Send sessionId request to jarvis
func (c *GjarvisAPIController) RequestSessionId(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RequestSessionId(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendAudio - Send audio message to jarvis
func (c *GjarvisAPIController) SendAudio(w http.ResponseWriter, r *http.Request) {
	audioMessageParam := AudioMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&audioMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAudioMessageRequired(audioMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAudioMessageConstraints(audioMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendAudio(r.Context(), audioMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendText - Send text message to jarvis
func (c *GjarvisAPIController) SendText(w http.ResponseWriter, r *http.Request) {
	textMessageParam := TextMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&textMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTextMessageRequired(textMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTextMessageConstraints(textMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendText(r.Context(), textMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
