/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Gjarvis - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AudioMessage
 */
export interface AudioMessage {
    /**
     * 
     * @type {string}
     * @memberof AudioMessage
     */
    'sessionId': string;
    /**
     * 
     * @type {File}
     * @memberof AudioMessage
     */
    'audioMessage': File;
}
/**
 * 
 * @export
 * @interface JarvisResponse
 */
export interface JarvisResponse {
    /**
     * 
     * @type {string}
     * @memberof JarvisResponse
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof JarvisResponse
     */
    'textAnswer': string;
    /**
     * 
     * @type {File}
     * @memberof JarvisResponse
     */
    'audioAnswer'?: File;
}
/**
 * 
 * @export
 * @interface TextMessage
 */
export interface TextMessage {
    /**
     * 
     * @type {string}
     * @memberof TextMessage
     */
    'sessionId': string;
    /**
     * 
     * @type {string}
     * @memberof TextMessage
     */
    'textMessage': string;
}

/**
 * GjarvisApi - axios parameter creator
 * @export
 */
export const GjarvisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send sessionId requeste to jarvis
         * @summary Send sessionId request to jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSessionId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generate-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send audio message to jarvis
         * @summary Send audio message to jarvis
         * @param {AudioMessage} audioMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAudio: async (audioMessage: AudioMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audioMessage' is not null or undefined
            assertParamExists('sendAudio', 'audioMessage', audioMessage)
            const localVarPath = `/audio-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'audio/mp3';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(audioMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send text message to jarvis
         * @summary Send text message to jarvis
         * @param {TextMessage} textMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText: async (textMessage: TextMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textMessage' is not null or undefined
            assertParamExists('sendText', 'textMessage', textMessage)
            const localVarPath = `/text-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GjarvisApi - functional programming interface
 * @export
 */
export const GjarvisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GjarvisApiAxiosParamCreator(configuration)
    return {
        /**
         * Send sessionId requeste to jarvis
         * @summary Send sessionId request to jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSessionId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JarvisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSessionId(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GjarvisApi.requestSessionId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Send audio message to jarvis
         * @summary Send audio message to jarvis
         * @param {AudioMessage} audioMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAudio(audioMessage: AudioMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JarvisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAudio(audioMessage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GjarvisApi.sendAudio']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Send text message to jarvis
         * @summary Send text message to jarvis
         * @param {TextMessage} textMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendText(textMessage: TextMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendText(textMessage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GjarvisApi.sendText']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GjarvisApi - factory interface
 * @export
 */
export const GjarvisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GjarvisApiFp(configuration)
    return {
        /**
         * Send sessionId requeste to jarvis
         * @summary Send sessionId request to jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSessionId(options?: any): AxiosPromise<JarvisResponse> {
            return localVarFp.requestSessionId(options).then((request) => request(axios, basePath));
        },
        /**
         * Send audio message to jarvis
         * @summary Send audio message to jarvis
         * @param {AudioMessage} audioMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAudio(audioMessage: AudioMessage, options?: any): AxiosPromise<JarvisResponse> {
            return localVarFp.sendAudio(audioMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * Send text message to jarvis
         * @summary Send text message to jarvis
         * @param {TextMessage} textMessage Get answer from jarvis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText(textMessage: TextMessage, options?: any): AxiosPromise<string> {
            return localVarFp.sendText(textMessage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GjarvisApi - object-oriented interface
 * @export
 * @class GjarvisApi
 * @extends {BaseAPI}
 */
export class GjarvisApi extends BaseAPI {
    /**
     * Send sessionId requeste to jarvis
     * @summary Send sessionId request to jarvis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GjarvisApi
     */
    public requestSessionId(options?: AxiosRequestConfig) {
        return GjarvisApiFp(this.configuration).requestSessionId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send audio message to jarvis
     * @summary Send audio message to jarvis
     * @param {AudioMessage} audioMessage Get answer from jarvis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GjarvisApi
     */
    public sendAudio(audioMessage: AudioMessage, options?: AxiosRequestConfig) {
        return GjarvisApiFp(this.configuration).sendAudio(audioMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send text message to jarvis
     * @summary Send text message to jarvis
     * @param {TextMessage} textMessage Get answer from jarvis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GjarvisApi
     */
    public sendText(textMessage: TextMessage, options?: AxiosRequestConfig) {
        return GjarvisApiFp(this.configuration).sendText(textMessage, options).then((request) => request(this.axios, this.basePath));
    }
}



